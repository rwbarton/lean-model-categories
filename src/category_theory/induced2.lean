import category_theory.fully_faithful
import category_theory.full_subcategory

universes u‚ÇÅ u‚ÇÇ v

namespace category_theory

variables {C : Type u‚ÇÅ} {D : Type u‚ÇÇ} [ùíü : category.{u‚ÇÇ v} D] (f : C ‚Üí D)
include ùíü f

def induced_category : Type u‚ÇÅ := C

instance induced_category.category : category.{u‚ÇÅ v} (induced_category f) :=
{ hom := Œª x y, f x ‚ü∂ f y,
  id := Œª x, ùüô _,
  comp := Œª _ _ _ f g, f ‚â´ g }

def induced_functor : induced_category f ‚•§ D :=
{ obj := f, map := Œª x y f, f }

instance induced_category.fully_faithful : fully_faithful (induced_functor f) :=
{ preimage := Œª x y f, f }

section tmp
-- simp lemmas for full_subcategory_inclusion.
-- We should probably implement full_subcategory_inclusion in terms of induced_category,
-- though

@[simp] lemma full_subcategory_inclusion_obj (Z : D ‚Üí Prop) (X) :
  (full_subcategory_inclusion Z).obj X = X.val :=
rfl

@[simp] lemma full_subcategory_inclusion_map (Z : D ‚Üí Prop) {X Y} (f : X ‚ü∂ Y) :
  (full_subcategory_inclusion Z).map f = f :=
rfl

end tmp

end category_theory
