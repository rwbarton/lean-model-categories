import category_theory.transfinite.construction
import category_theory.limits.over

noncomputable theory

local attribute [instance] classical.dec

open category_theory category_theory.functor well_order_top

universes v u


-- TODO: move to limits.over?
namespace category_theory.over

lemma of_eq {C : Type u} [category.{v} C] {Z : C} {X Y : over Z} (h : X = Y) :
  X.hom = eq_to_hom (by cases h; refl) ‚â´ Y.hom :=
by cases h; simp

end category_theory.over

namespace category_theory.transfinite
section

parameters {C : Type u} [ùíû : category.{v} C] [limits.has_colimits C]
include ùíû

parameters {I : morphism_class C}

parameters {Œ≥ : Type v} [well_order_top Œ≥]

parameters (step : Œ† {X Y : C} (g : X ‚ü∂ Y), Œ£' X' (j : X ‚ü∂ X') (g' : X' ‚ü∂ Y), g = j ‚â´ g' ‚àß I j)

-- Plan: use the existing argument in the over category C/Y.

def soa_factor {X Y : C} (g : X ‚ü∂ Y) :
  Œ£' (c : transfinite_composition I Œ≥) (g' : c.F.obj ‚ä§ ‚ü∂ Y) (h‚ÇÄ : c.F.obj ‚ä• = X),
  g = (eq_to_hom h‚ÇÄ.symm ‚â´ c.composition) ‚â´ g' :=
let ‚ü®c', hc'‚ü© :=
  @build_transfinite_composition (over Y) _ _ (I.preimage over.forget) Œ≥ _
    (Œª XY, over.mk (step XY.hom).2.2.1)
    (Œª XY, over.hom_mk (step XY.hom).2.1 (step XY.hom).2.2.2.1.symm)
    (Œª XY, (step XY.hom).2.2.2.2)
    (over.mk g) in
‚ü®c'.map over.forget, (c'.F.obj ‚ä§).hom,
 begin
   have := congr_arg (Œª Z, over.forget.obj Z) hc',
   refine ‚ü®this, _‚ü©,
   dsimp [transfinite_composition.composition, transfinite_composition.map],
   rw [category.assoc, over.w],
   apply category_theory.over.of_eq hc'.symm
 end‚ü©

end
end category_theory.transfinite
