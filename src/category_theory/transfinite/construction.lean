import category_theory.transfinite.extend2
import logic.crec

noncomputable theory

local attribute [instance] classical.dec

open category_theory category_theory.functor
open well_order_top

universes u v

namespace category_theory.transfinite
section

parameters {C : Type u} [ùíû : category.{u v} C] [limits.has_colimits C]
include ùíû

parameters {I : morphism_class C}

parameters {Œ≥ : Type v} [well_order_top Œ≥]


variables (F : C ‚Üí C) (Œ± : Œ† X, X ‚ü∂ F X) (hŒ± : ‚àÄ X, I (Œ± X))
include hŒ±

def build_transfinite_composition (X : C) :
  Œ£' (c : transfinite_composition I Œ≥), c.F.obj ‚ä• = X :=
begin
  have ci : Œ† (i : Œ≥), Œ£' (c : transfinite_composition I (Ic i)),
    c.F.obj ‚ä• = X,
  { refine crec (is_well_order.wf (<))
      (Œª i i hii' c c', c.1.F = (Ic_initial_seg_Ic (le_of_lt hii')).to_functor ‚ãô c'.1.F) _,
    rintros j ‚ü®Z, hZ‚ü©,
    let Z' := Œª i hi, (Z i hi).1,
    rcases is_bot_or_succ_or_limit j with ‚ü®_,hj‚ü©|‚ü®i,_,hij‚ü©|‚ü®_,hj‚ü©;
    [refine ‚ü®‚ü®extend2.extend_tcomp_bot Z' hZ hj X, _‚ü©, _‚ü©,
     refine ‚ü®‚ü®extend2.extend_tcomp_succ Z' hZ hij (Œ± _) (hŒ± _), _‚ü©, _‚ü©,
     refine ‚ü®‚ü®extend2.extend_tcomp_limit Z' hZ hj, _‚ü©, _‚ü©],
    all_goals { try { apply extend1.extend_tcomp_F_extends } },
    apply extend2.extend_tcomp_bot_bot,
    all_goals
    { have : ‚ä• < j,
      { apply bot_lt, intro h, apply not_bot_succ h hij <|> apply not_bot_limit h hj },
      have : (‚ä• : Ic j) = (Ic_initial_seg_Ic (le_of_lt this)).to_functor.obj ‚ä• := rfl,
      rw this,
      change (_ ‚ãô extend1.extend_tcomp_F _ _ _).obj _ = _,
      rw ‚Üêextend1.extend_tcomp_F_extends,
      apply (Z ‚ä• _).snd } },

  refine ‚ü®(ci ‚ä§).1.restrict, (ci ‚ä§).2‚ü©,
end

end
end category_theory.transfinite
