import category_theory.compact
import category_theory.generator
import category_theory.induced2
import category_theory.limits.functor_category
import category_theory.limits.types
import category_theory.presheaf

universes u v

namespace category_theory
open category_theory.functor

variables (Œ∫ : regular_cardinal.{v})

section

variables (C : Type u) [ùíû : category.{u v} C] [limits.has_colimits.{u v} C]
include ùíû

include Œ∫

/-- A cocomplete category C is locally Œ∫-presentable if there exists
  a set of objects A·µ¢ such that

  * each object A·µ¢ is Œ∫-compact, and
  * every object of C can be written as a Œ∫-filtered colimit of the objects A·µ¢.

  The second condition requires a little trickery...
-/
def is_locally_kappa_presentable : Prop :=
‚àÉ (Œπ : Type v) (A : Œπ ‚Üí C),
(‚àÄ i, is_kappa_compact Œ∫ (A i)) ‚àß
(‚àÄ X, ‚àÉ (J : Type v) [small_category J], by exactI is_kappa_filtered Œ∫ J ‚àß
  ‚àÉ (F : J ‚•§ induced_category A) (t : (F ‚ãô induced_functor A) ‚üπ (const _).obj X),
  nonempty (limits.is_colimit { X := X, Œπ := t }))

variables {C}

section of_strong_generator

/-- [AR94], 1.11 -/

variables {J : Type v} [small_category J]

inductive closure_under_J {Œπ : Type v} (A : Œπ ‚Üí C) : Type v
| gen (i : Œπ) : closure_under_J
| colim (F_obj : J ‚Üí closure_under_J) : closure_under_J

/-
lemma is_locally_kappa_presentable_of_strong_generator {Œπ : Type v} (A : Œπ ‚Üí C)
  (h‚ÇÅ : ‚àÄ i, is_kappa_compact Œ∫ (A i)) (h‚ÇÇ : is_strong_generator A) :
  is_locally_kappa_presentable Œ∫ C :=
sorry
-/

end of_strong_generator

/-
/-- A presheaf category is locally Œ∫-presentable for any regular cardinal Œ∫. -/
lemma presheaf_is_locally_kappa_presentable {J : Type v} [small_category J] :
  is_locally_kappa_presentable Œ∫ (presheaf J) :=
@is_locally_kappa_presentable_of_strong_generator Œ∫ (presheaf J) _ (@presheaf.has_colimits J _) _
  yoneda.obj (Œª j, representable_is_compact Œ∫ j) yoneda_is_strong_generator
-/

end

end category_theory
