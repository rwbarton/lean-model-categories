import category_theory.limits.limits
import category_theory.cone_stuff
import category_theory.stuff
import category_theory.equivalence
import category_theory.compose_functors
import category_theory.discrete_category

universes u v

namespace category_theory

open category_theory.functor
open category_theory.limits

variables {J K : Type v} [small_category J] [small_category K]
variables {C : Type u} [ùíû : category.{u v} C]
include ùíû

section

variables {E : K ‚•§ J}
  (e : Œ† (F : J ‚•§ C) (W : C), (F ‚üπ (const J).obj W) ‚âÉ ((E ‚ãô F) ‚üπ (const K).obj W))
  (he : ‚àÄ F W t, e F W t = whisker_left E t)

include he
def whisker_left_preserves_colimits {F : J ‚•§ C} {t : cocone F} :
  is_colimit t ‚âÉ is_colimit (t.whisker E) :=
{ to_fun := Œª h,
    is_colimit.of_hom_iso
      (Œª W, ((h.hom_iso _).to_equiv.trans (e _ _)).to_iso)
      (Œª W f, by dsimp; rw he; refl),
  inv_fun := Œª h,
    is_colimit.of_hom_iso
      (Œª W, ((h.hom_iso _).to_equiv.trans (e _ _).symm).to_iso)
      (Œª W f, by dsimp; rw [equiv.symm_apply_eq, he]; refl),
  left_inv := Œª h, subsingleton.elim _ _,
  right_inv := Œª h, subsingleton.elim _ _ }

end

section whisker_equivalence

variables (E : K ‚âå J)

def whisker_left_equivalence_preserves_colimits {F : J ‚•§ C} {t : cocone F} :
  is_colimit t ‚âÉ is_colimit (t.whisker E.functor) :=
whisker_left_preserves_colimits
  (Œª F W, hom_equiv (precompose_equivalence E).functor) (Œª F W t, rfl)

end whisker_equivalence

lemma is_colimit_of_iso {J : Type v} [small_category J] {F G : J ‚•§ C} (Œ± : F ‚âÖ G)
  {t : limits.cocone G} (ht : limits.is_colimit t) : limits.is_colimit (t.precompose Œ±.hom) :=
is_colimit.of_hom_iso
  (Œª W, (ht.hom_iso W).trans ((yoneda.obj ((const J).obj W)).on_iso Œ±.op.symm))
  (Œª W f, by dsimp [cocone.precompose]; simp; refl) -- TODO: more simp lemmas

-- TODO: Clean up
@[simp] def cone.of_function {I : Type v} (X : C) {F : I ‚Üí C} (f : Œ† i : I, X ‚ü∂ F i) :
  limits.cone (functor.of_function F) :=
{ X := X,
  œÄ := { app := Œª i, f i,
    naturality' := Œª X Y g,
    begin
      cases g, cases g, cases g,
      dsimp [functor.of_function],
      simp,
    end } }

@[simp] def cocone.of_function' {I : Type v} (X : C) {F : discrete I ‚•§ C}
  (f : Œ† i : I, F.obj i ‚ü∂ X) : limits.cocone F :=
{ X := X,
  Œπ := { app := Œª i, f i,
    naturality' := Œª X Y g,
    begin
      cases g, cases g, cases g,
      dsimp [functor.of_function],
      simp,
    end } }

@[simp] def cocone.of_function {I : Type v} (X : C) {F : I ‚Üí C} (f : Œ† i : I, F i ‚ü∂ X) :
  limits.cocone (functor.of_function F) :=
cocone.of_function' X f

end category_theory
