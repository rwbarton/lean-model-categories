import homotopy_theory.topological_spaces.weak_equivalences
import homotopy_theory.formal.cylinder.sdr
import homotopy_theory.formal.i_category.cylinder_object
import homotopy_theory.formal.i_category.dold
import wfs_top
import distrib_stuff

open category_theory category_theory.limits
open homotopy_theory.topological_spaces homotopy_theory.cylinder homotopy_theory.cofibrations

local notation `Top` := Top.{0}

namespace model_top

def ctiwe : morphism_class Top := @closed_t1_inclusion ‚à© @is_weak_equivalence

--- Hovey, 2.4.8
axiom ctiwe_tcomp : closed_under_tcomp ctiwe

def sdr : morphism_class Top := Œª a b f, is_sdr_inclusion f

def ctisdr : morphism_class Top := @closed_t1_inclusion ‚à© sdr

lemma ctisdr_ctiwe : ctisdr ‚äÜ ctiwe :=
Œª a b f ‚ü®hf‚ÇÅ, ‚ü®‚ü®r, h, H‚ü©‚ü©‚ü©,
‚ü®hf‚ÇÅ,
 -- Compare heq_iff_sdr_inclusion.
 is_weak_equivalence_of_heq _ $ homotopy_equivalence_iff.mpr
   ‚ü®r, by convert homotopic.refl (ùüô a), H.forget_rel‚ü©‚ü©

lemma sdr_pushouts : closed_under_pushouts sdr := Œª a b a' b' f f' i j po hf,
pushout_of_sdr_inclusion po (preserves_pushouts.Is_pushout_of_Is_pushout _ po) hf

lemma ctisdr_pushouts : closed_under_pushouts ctisdr :=
closed_under_pushouts_inter @closed_t1_inclusion_pushout sdr_pushouts

lemma {u v} sigma.eq' {Œπ : Type u} {Œ± : Œπ ‚Üí Type v} {i : Œπ} {x y : Œ± i} :
  sigma.mk i x = sigma.mk i y ‚Üî x = y :=
by split; cc

-- TODO: Prove this for any I-category (assuming I preserves coproducts)
lemma ctisdr_coproducts : closed_under_coproducts ctisdr :=
closed_under_coproducts_inter @closed_t1_inclusion_coproduct $
closed_under_coproducts_of_coproduct @Top_coproduct @Top_coproduct_is_colimit
  (closed_under_isos_of_closed_under_pushouts sdr_pushouts) $ Œª Œπ a b f hf,
begin
  replace hf := Œª i, classical.choice (hf i),
  refine ‚ü®‚ü®Top_coproduct.map (nat_trans.of_function (Œª i, (hf i).r)), _, _‚ü©‚ü©,
  { ext p,
    rcases p with ‚ü®i, x‚ü©,
    change sigma.mk i _ = sigma.mk i x,
    congr,
    exact Top.hom_congr (hf i).h x },
  { have : ‚àÄ i, ‚àÉ H : homotopy _ _, H.is_rel _ := Œª i, (hf i).H,
    choose H hH using this,
    let H' := Top_coproduct.map (nat_trans.of_function (Œª i, (H i).H)),
    refine ‚ü®‚ü®Top_distrib _ _ ‚â´ H', _, _‚ü©, _‚ü©,
    { ext p,
      rcases p with ‚ü®i, x‚ü©,
      apply sigma.eq'.mpr,
      exact Top.hom_congr (H i).Hi‚ÇÄ x },
    { ext p,
      rcases p with ‚ü®i, x‚ü©,
      apply sigma.eq'.mpr,
      exact Top.hom_congr (H i).Hi‚ÇÅ x },
    { ext p,
      rcases p with ‚ü®‚ü®i, x‚ü©, t‚ü©,
      apply sigma.eq'.mpr,
      exact Top.hom_congr (hH i) ‚ü®x, t‚ü© } }
end

-- TODO: Prove this for any I-category
-- TODO: Add extensionality lemma for I01?
lemma sdr_i {X : Top} : sdr ((i 0).app X) :=
begin
  refine ‚ü®‚ü®p.app X, pi_components 0, ‚ü®‚ü®_, _, _‚ü©, _‚ü©‚ü©‚ü©,
  { refine Top.mk_hom -- x = p.1.1, t = p.1.2, u = p.2
      (Œª p, ‚ü®p.1.1, ‚ü®p.1.2.1 * p.2.1, mul_nonneg p.1.2.2.1 p.2.2.1, mul_le_one p.1.2.2.2 p.2.2.1 p.2.2.2‚ü©‚ü©) _,
    continuity },
  all_goals {
    ext x,
    refl,
    cases x with x t,
    apply subtype.eq,
    apply mul_zero <|> apply mul_one <|> apply zero_mul
  }
end

lemma ctisdr_J (n : ‚Ñï) : ctisdr ((i 0).app (disk n)) :=
‚ü®closed_t1_inclusion_of_closed_embedding_t1 _ embedding_i closed_i, sdr_i‚ü©

lemma top_soa' {X Y : Top} (g : X ‚ü∂ Y) :
  ‚àÉ Z (j : X ‚ü∂ Z) (q : Z ‚ü∂ Y), ctiwe j ‚àß rlp serre_J q ‚àß j ‚â´ q = g :=
let ‚ü®Z, j, q, hg, hj, hq‚ü© := soa_stmt Js ctisdr ctiwe
  (Œª i, ctisdr_J i)
  (Œª a b a' b' f i j f' po hf, ctisdr_pushouts po hf)
  (Œª Œπ a b f hf, ctisdr_coproducts hf)
  (Œª Œ≥ I‚ÇÅ c, by exactI ctiwe_tcomp (c.cast ctisdr_ctiwe)) 
  (Œª i, transfinite.Œ∫_small_mono (Œª a b f hf, hf.1)
     (@compact_small_closed_t1_inclusion _ (show compact_space (disk i), by apply_instance)))
  ((ordinal.omega + 1).out.Œ±)
  (by convert le_refl _; convert ‚Üêout_cofinality; exact ordinal.cof_omega) g in
‚ü®Z, j, q, hj, begin rintros a b f ‚ü®i‚ü©, exact hq i end, hg.symm‚ü©

lemma {u v} h_is_iso {C : Type u} [category.{u v} C] {a b : C} {f : a ‚ü∂ b} :
  homotopy_theory.weak_equivalences.is_iso f ‚Üî nonempty (is_iso f) :=
begin
  split,
  { rintro ‚ü®i, rfl‚ü©,
    exact ‚ü®infer_instance‚ü© },
  { rintro ‚ü®i‚ü©,
    resetI,
    exact ‚ü®iso.of_is_iso f, rfl‚ü© }
end

lemma œÄ_induced_congr (n : ‚Ñï) {X Y : Top} {f g : X ‚ü∂ Y} {x : X} (e : f = g) :
  œÄ_induced n x f ‚â´ eq_to_hom (by congr; exact Top.hom_congr e x) = œÄ_induced n x g :=
by cases e; refl

lemma œÄ_induced_congr' (n : ‚Ñï) {X Y : Top} {f : X ‚ü∂ Y} {x x' : X} (e : x = x') :
  eq_to_hom (by congr; exact e) ‚â´ œÄ_induced n x' f =
  œÄ_induced n x f ‚â´ eq_to_hom (by congr; exact congr_arg f e) :=
by cases e; refl

lemma W_retracts {a b a' b'} {f : a ‚ü∂ b} {f' : a' ‚ü∂ b'} (r : retract f f') :
  is_weak_equivalence f ‚Üí is_weak_equivalence f' :=
begin
  rintro ‚ü®h0, hn‚ü©,
  refine ‚ü®_, Œª n x, _‚ü©,
  { have : retract (œÄ‚ÇÄ.map f) (œÄ‚ÇÄ.map f') := œÄ‚ÇÄ.on_retract r,
    rw h_is_iso at ‚ä¢ h0,
    exact nonempty.map (retract_is_iso this) h0 },
  { have : retract (œÄ_induced n (r.ia x) f) (œÄ_induced n x f'),
    { -- Compare functor.on_retract
      refine ‚ü®œÄ_induced n x r.ia, œÄ_induced n (r.ia x) r.ra ‚â´ eq_to_hom _,
              œÄ_induced n (f' x) r.ib ‚â´ eq_to_hom _, œÄ_induced n _ r.rb ‚â´ eq_to_hom _,
              _, _, _, _‚ü©,
      { congr, exact Top.hom_congr r.ha x },
      { congr, exact (Top.hom_congr r.hi x).symm },
      { congr, convert (Top.hom_congr r.hr _).symm,
        change f' x = f' ((r.ia ‚â´ r.ra) x),
        rw Top.hom_congr r.ha x, refl },
      { rw [‚Üêcategory.assoc, ‚ÜêœÄ_induced_comp, œÄ_induced_congr, œÄ_induced_id], refl },
      { slice_lhs 2 3 { rw œÄ_induced_congr' },
        slice_lhs 1 2 { rw [‚ÜêœÄ_induced_comp, ‚ÜêœÄ_induced_congr n r.hb.symm, œÄ_induced_id] },
        simp, refl },
      { rw [‚ÜêœÄ_induced_comp, ‚Üêcategory.assoc, ‚ÜêœÄ_induced_comp, œÄ_induced_congr],
        exact r.hi.symm },
      { rw [category.assoc, œÄ_induced_congr'],
        rw [‚Üêcategory.assoc, ‚ÜêœÄ_induced_comp, ‚Üêcategory.assoc, ‚ÜêœÄ_induced_comp],
        rw [‚ÜêœÄ_induced_congr n r.hr],
        simp, refl } },
    replace hn := hn n (r.ia x),
    rw h_is_iso at ‚ä¢ hn,
    exact nonempty.map (retract_is_iso this) hn }
end

lemma AC_sub_W : llp (rlp serre_J) ‚äÜ @is_weak_equivalence := Œª a b f hf,
let ‚ü®a', b', f', r, hf'‚ÇÅ, hf'‚ÇÇ‚ü© := retract_argument serre_acf @top_soa' f hf in
W_retracts r hf'‚ÇÇ

end model_top
