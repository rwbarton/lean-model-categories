import category_theory.small
import homotopy_theory.topological_spaces.closed_t1_inclusion
import logic.crec
import tactic.norm_num
import closed_embedding

local attribute [instance] classical.prop_decidable

open category_theory category_theory.transfinite
open homotopy_theory.topological_spaces
open set

-- This seems too complicated, somehow.
lemma finite_of_discrete_subset_compact {Œ± : Type*} [topological_space Œ±] {s t : set Œ±}
  (h : s ‚äÜ t) (hs : ‚àÄ s' ‚äÜ s, is_closed s') (ht : compact t) : finite s :=
have compact s, from compact_of_is_closed_subset ht (hs _ (subset.refl s)) h,
have _ := compact_iff_compact_univ.mp this,
have opens : ‚àÄ x ‚àà (univ : set s), is_open ({x} : set s), begin
  intros x _,
  rw ‚Üêis_closed_compl_iff,
  convert ‚Üêcontinuous_iff_is_closed.mp continuous_subtype_val (subtype.val '' (- {x} : set s)) _,
  { exact preimage_image_eq _ subtype.val_injective },
  { apply hs, convert image_subset_range _ _, simp }
end,
let ‚ü®b, bs, bf, sb‚ü© := compact_elim_finite_subcover_image this opens (by intro x; cases x; simpa) in -- make simp lemma?
begin
  rw (subset.antisymm bs (by simpa using sb)) at bf,
  convert ‚Üêfinite_image subtype.val bf,
  simp
end

-- TODO: Convenient name for this c.F.map ... le_top stuff

open well_order_top

lemma tcomp_range_monotone {Œ≥ : Type*} [well_order_top Œ≥]
  {I : morphism_class Top} (c : transfinite_composition I Œ≥) {i j : Œ≥} (h : i ‚â§ j) :
  range (c.F.map ‚ü®‚ü®(le_top : i ‚â§ ‚ä§)‚ü©‚ü©) ‚äÜ range (c.F.map ‚ü®‚ü®(le_top : j ‚â§ ‚ä§)‚ü©‚ü©) :=
begin
  rintros _ ‚ü®x, rfl‚ü©,
  refine ‚ü®c.F.map ‚ü®‚ü®h‚ü©‚ü© x, _‚ü©,
  have := c.F.map_comp ‚ü®‚ü®h‚ü©‚ü© ‚ü®‚ü®(le_top : j ‚â§ ‚ä§)‚ü©‚ü©,
  exact (Top.hom_congr this x).symm
end

lemma closed_embedding_of_closed_t1_inclusion {X Y : Top} {f : X ‚ü∂ Y}
  (h : closed_t1_inclusion f) : closed_embedding f := ‚ü®h.1, h.2.1‚ü©

lemma closed_t1_inclusion_tcomp {Œ≥ : Type*} [well_order_top Œ≥]
  (c : transfinite_composition @closed_t1_inclusion Œ≥) : closed_t1_inclusion c.composition :=
have ce : ‚àÄ j, closed_embedding (c.F.map ‚ü®‚ü®(le_top : j ‚â§ ‚ä§)‚ü©‚ü©), from
  Œª j, closed_embedding_tcomp (c.cast @closed_embedding_of_closed_t1_inclusion) _,
‚ü®(ce ‚ä•).1, (ce ‚ä•).2, Œª x hx, begin
   let s := {j | x ‚àà range (c.F.map ‚ü®‚ü®(le_top : j ‚â§ ‚ä§)‚ü©‚ü©)},
   have : s ‚â† ‚àÖ,
   { apply ne_empty_of_mem,
     change x ‚àà range (c.F.map (ùüô ‚ä§)),
     rw c.F.map_id,
     change x ‚àà range id,       -- simp lemma?
     simp },
   let i := well_founded.min (is_well_order.wf (<)) s this,
   have is : i ‚àà s, by apply well_founded.min_mem,
   have imin : ‚àÄ i' < i, i' ‚àâ s, from
     Œª i' hi' i's, well_founded.not_lt_min _ s this i's hi',
   change x ‚àà range _ at is,
   -- i is the first stage at which x appears. It must be a successor stage.
   rcases is_bot_or_succ_or_limit i with ‚ü®_, hi‚ü©|‚ü®i', _, hi‚ü©|‚ü®_, hi‚ü©,
   { have : i = ‚ä•, from is_bot_iff_bot.mp hi,
     refine absurd _ hx,
     dsimp [transfinite_composition.composition],
     convert ‚Üêis },
   { rcases c.succ i' i hi with ‚ü®_, _, T‚ÇÅ‚ü©,
     rcases is with ‚ü®y, hy‚ü©,
     have : is_closed {y},
     { refine T‚ÇÅ y _,
       rintro ‚ü®z, hz‚ü©,
       have : i' ‚àà s,           -- TODO: Deduplicate with below
       { refine ‚ü®z, _‚ü©,
         rw [‚Üêhy, ‚Üêhz],
         have := c.F.map_comp ‚ü®‚ü®le_of_lt _‚ü©‚ü© ‚ü®‚ü®le_top‚ü©‚ü©,
         exact (Top.hom_congr this z) },
       exact imin i' hi.lt this },
     convert (ce i).closed_iff_image_closed.mp this,
     simp [hy] },
   { rcases c.limit i hi with hlim,
     have := jointly_surjective (_ ‚ãô forget) (limits.preserves_colimit.preserves forget hlim),
     rcases is with ‚ü®y, hy‚ü©,
     rcases this y with ‚ü®‚ü®i', hi'‚ü©, z, hz‚ü©,
     have : i' ‚àà s,
     { refine ‚ü®z, _‚ü©,
       rw [‚Üêhy, ‚Üêhz],
       have := c.F.map_comp ‚ü®‚ü®le_of_lt hi'‚ü©‚ü© ‚ü®‚ü®le_top‚ü©‚ü©,
       exact (Top.hom_congr this z) },
     exact absurd this (imin i' hi') }
 end‚ü©

-- TODO: Split off some simple parts of this into lemmas.
-- infinite_iff_unbounded?
-- sup over a cofinal subset is equal? unbounded subset cofinal in ‚Ñï?
lemma compact_small_aux {X : Top} {k : set X} (hk : compact k)
  {Œ≥ : Type*} [well_order_top Œ≥] (hŒ≥ : is_limit (‚ä§ : Œ≥))
  (s : Œ≥ ‚Üí set X) (h‚ÇÅ : ‚àÄ i j, i ‚â§ j ‚Üí s i ‚äÜ s j) (h‚ÇÇ : ‚àÄ x, ‚àÉ (j < ‚ä§), x ‚àà s j)
  (h‚ÇÉ : ‚àÄ x, x ‚àâ s ‚ä• ‚Üí is_closed ({x} : set X))
  (h‚ÇÑ : ‚àÄ j, is_limit j ‚Üí ‚àÄ t ‚äÜ s j, (‚àÄ i < j, is_closed (t ‚à© s i)) ‚Üí is_closed t) :
  ‚àÉ j < ‚ä§, k ‚äÜ s j :=
begin
  by_contradiction H,
  simp only [not_exists, not_subset] at H,

  -- TODO: Tactic to make this more palatable?
  have r,
  { refine @crec' ‚Ñï (<) nat.lt_wf
      (Œª n, Œ£' (j < ‚ä§), subtype ((k ‚à© - s ‚ä•) ‚à© s j : set X))
      (Œª n n' h xn xn', xn'.2.2.val ‚àâ s xn.1) _,
    intros n x',
    apply classical.choice,
    cases n with n',
    { rcases H ‚ä• (bot_lt (Œª b, not_bot_limit b hŒ≥)) with ‚ü®x, xk, xs‚ü©,
      rcases h‚ÇÇ x with ‚ü®j, jt, xj‚ü©,
      refine ‚ü®‚ü®‚ü®j, jt, x, ‚ü®xk, xs‚ü©, xj‚ü©, Œª i hi, _‚ü©‚ü©,
      cases hi },
    { rcases H (x'.val n' (nat.lt_succ_self _)).1 (x'.val n' (nat.lt_succ_self _)).2.1
        with ‚ü®x, xk, xs‚ü©,
      rcases h‚ÇÇ x with ‚ü®j, jt, xj‚ü©,
      refine ‚ü®‚ü®‚ü®j, jt, x, ‚ü®xk, Œª h, xs (h‚ÇÅ _ _ bot_le h)‚ü©, xj‚ü©, Œª i hi, _‚ü©‚ü©,
      { change x ‚àâ s (x'.val i hi).1,
        intro h,
        apply xs,
        rcases eq_or_lt_of_le (nat.le_of_lt_succ hi) with rfl|hi',
        { exact h },
        { have : (x'.val i hi).1 < (x'.val n' (nat.lt_succ_self _)).1,
          { refine (lt_or_ge _ _).resolve_right (Œª h', _),
            apply x'.property i n' _ _ hi',
            apply h‚ÇÅ _ _ h',
            apply (x'.val n' _).2.2.property.2 },
          exact h‚ÇÅ _ _ (le_of_lt this) h } } } },
  rcases r with ‚ü®x, hx‚ü©, dsimp only [] at hx,

  have x_incr : ‚àÄ i j (h : i < j), (x i).1 < (x j).1, from Œª i j h,
    (lt_or_ge _ _).resolve_right (Œª h', hx i j h (h‚ÇÅ _ _ h' (x j).2.2.property.2)),

  have hx' : ‚àÄ i j, (x j).2.2.val ‚àà s (x i).1 ‚Üí j ‚â§ i :=
   Œª i j h, (lt_or_ge _ _).resolve_left (Œª h', hx _ _ h' h),

  let m : Œ≥ := lattice.supr (Œª n, (x n).1),
  have mlim : is_limit m,
  { apply supr_limit,
    intro n,
    apply x_incr,
    apply nat.lt_succ_self },

  let d : set X := range (Œª n, (x n).2.2.val),
  have dk : d ‚äÜ k, { rintro _ ‚ü®n, rfl‚ü©, exact (x n).2.2.property.1.1 },
  have : ‚àÄ d' ‚äÜ d, is_closed d',
  { intros d' hd',
    apply h‚ÇÑ m mlim,
    { refine subset.trans hd' _,
      rintros _ ‚ü®n, rfl‚ü©,
      have : s (x n).1 ‚äÜ s m,
      { apply h‚ÇÅ, apply lattice.le_supr _ n },
      apply this,
      exact (x n).2.2.property.2 },
    { intros i hi,
      let I := {n | (x n).2.2.val ‚àà d' ‚à© s i},
      have : finite I,
      { by_contradiction inf,
        have : ‚àÄ j, ‚àÉ n ‚àà I, n > j, -- lemma?
        { intro j,
          by_contradiction hj,
          have : I ‚äÜ {n | n ‚â§ j} := Œª n nI, (lt_or_ge _ _).resolve_left (Œª nj, hj ‚ü®n, nI, nj‚ü©),
          exact inf (finite_subset (finite_le_nat j) this) },
        have : i ‚â• m,
        { apply lattice.supr_le,
          intro j,
          rcases this j with ‚ü®n, nI, nj‚ü©,
          refine le_of_lt ((lt_or_ge _ _).resolve_right (Œª h, _)),
          exact not_lt_of_ge (hx' _ _ ((h‚ÇÅ _ _ h) nI.2)) nj },
        exact not_lt_of_ge this hi },
      convert is_closed_Union this (Œª n hn, h‚ÇÉ _ (x n).2.2.property.1.2),
      ext z, simp only [mem_Union], split,
      { rintro ‚ü®zd', zsi‚ü©,
        rcases hd' zd' with ‚ü®zn, hzn‚ü©, subst z,
        refine ‚ü®zn, ‚ü®zd', zsi‚ü©, by apply mem_singleton‚ü© },
      { rintro ‚ü®n, hn‚ÇÅ, hn‚ÇÇ‚ü©,
        rw mem_singleton_iff at hn‚ÇÇ, subst z, exact hn‚ÇÅ } } },

  have : finite (range _) := finite_of_discrete_subset_compact dk this hk,

  have inj : function.injective (Œª n, (x n).2.2.val),
  { intros i j xij, change (x i).2.2.val = (x j).2.2.val at xij,
    wlog hij : i ‚â§ j using [i j, j i], { apply le_total },
    refine (eq_or_lt_of_le hij).resolve_right (Œª hij', _),
    have xi : (x i).2.2.val ‚àà s (x i).1, from (x i).2.2.property.2,
    have xj : (x j).2.2.val ‚àâ s (x i).1, by apply hx _ _ hij',
    rw xij at xi, exact xj xi },
  rw ‚Üêimage_univ at this,
  exact infinite_univ_nat (finite_of_finite_image inj this)
end

--- Hovey, Proposition 2.4.2
lemma compact_small_closed_t1_inclusion {X : Top} [compact_space X] :
  Œ∫_small @closed_t1_inclusion cardinal.omega X :=
Œª Œ≥ I‚ÇÅ hŒ≥ c f, begin
  resetI,
  have ce : ‚àÄ j, closed_embedding (c.F.map ‚ü®‚ü®(le_top : j ‚â§ ‚ä§)‚ü©‚ü©) :=
    Œª j, closed_embedding_tcomp (c.cast @closed_embedding_of_closed_t1_inclusion) _,
  suffices : ‚àÉ j < ‚ä§, range f ‚äÜ range (c.F.map ‚ü®‚ü®(le_top : j ‚â§ ‚ä§)‚ü©‚ü©),
  { rcases this with ‚ü®j, hj, hf‚ü©,
    exact ‚ü®j, hj, Top.factor_through_embedding hf (ce j).1, by simp‚ü© },
  have : compact (range f), { rw ‚Üêimage_univ, exact compact_image compact_univ f.property },
  apply compact_small_aux this (is_limit_of_cofinality hŒ≥),
  { apply tcomp_range_monotone },
  { rcases c.limit ‚ä§ (is_limit_of_cofinality hŒ≥) with hlim,
    have := jointly_surjective (_ ‚ãô forget) (limits.preserves_colimit.preserves forget hlim),
    intro x,
    rcases this x with ‚ü®‚ü®j, jt‚ü©, y, hy‚ü©,
    refine ‚ü®j, jt, y, hy‚ü© },
  { exact (closed_t1_inclusion_tcomp c).2.2 },
  { intros j hj t h‚ÇÅ h‚ÇÇ,
    rw (ce j).closed_iff_preimage_closed h‚ÇÅ,
    rcases c.limit j hj with ‚ü®hlim‚ü©,
    rw is_closed_in_colimit _ hlim,
    rintro ‚ü®i, hi‚ü©,
    rw (ce i).closed_iff_image_closed,
    convert h‚ÇÇ i hi,
    convert image_preimage_eq_inter_range using 2,
    rw ‚Üêpreimage_comp,
    congr' 1,
    exact subtype.ext.mp (c.F.map_comp _ _).symm }
end

